--@0f14
--jinbohook.rip | phantom forces build
print('executed')
local Require = assert(getrenv().shared.require, "Script wasn't ran on actor!")
local oldIndex,ConfigList,CustomSoundID
local base64,hookfunction,checkcaller,getnamecallmethod,writefile,readfile,delfile,listfiles,isfolder,Drawing,makefolder,Hidden,Service,LibraryOpen = getgenv().base64,getgenv().hookfunction,getgenv().checkcaller,getgenv().getnamecallmethod,getgenv().writefile,getgenv().readfile,getgenv().delfile,getgenv().listfiles,getgenv().isfolder,getgenv().Drawing,getgenv().makefolder,getgenv().gethui(),game.GetService,false
local ls,plrs,ws,rs,ts,RS,uis,Debris = Service(game,'Lighting'),Service(game,'Players'),Service(game,'Workspace'),Service(game,'RunService'),Service(game,'TweenService'),Service(game,'ReplicatedStorage'),Service(game,'UserInputService'),Service(game,"Debris")
local lp,camera = plrs.LocalPlayer,ws.CurrentCamera
local Zero,RotationAngle,Tick,Lerp = Vector3.zero,0,tick(),Color3.new().Lerp

RoundSystemClientInterface = Require("RoundSystemClientInterface")
WeaponControllerInterface = Require("WeaponControllerInterface")
PlayerDataClientInterface = Require("PlayerDataClientInterface")
HudCrosshairsInterface = Require("HudCrosshairsInterface")
LeaderboardInterface = Require("LeaderboardInterface")
ReplicationInterface = Require("ReplicationInterface")
CharacterInterface = Require("CharacterInterface")
ActiveLoadoutUtils = Require("ActiveLoadoutUtils")
PlayerStatusEvents = Require("PlayerStatusEvents")
ReplicationObject = Require("ReplicationObject")
ThirdPersonObject = Require("ThirdPersonObject")
ContentDatabase = Require("ContentDatabase")
BulletInterface = Require("BulletInterface")
CharacterObject = Require("CharacterObject")
CameraInterface = Require("CameraInterface")
CameraObject = Require("MainCameraObject")
PublicSettings = Require("PublicSettings")
FirearmObject = Require("FirearmObject")
NetworkClient = Require("NetworkClient")
BulletObject = Require("BulletObject")
MeleeObject = Require("MeleeObject")
BulletCheck = Require("BulletCheck")
GameClock = Require("GameClock")
Physics = Require("PhysicsLib")
Sound = Require("AudioSystem")
Effects = Require("Effects")

local RayParams = RaycastParams.new()
RayParams.FilterType = Enum.RaycastFilterType.Blacklist
RayParams.FilterDescendantsInstances = {ws.Players, ws.Ignore, camera}

local LightingProperties = {'FogEnd','Ambient','FogColor','ClockTime','Brightness','OutdoorAmbient','ExposureCompensation'}

local HitPoints = {'Head'}

local ScanPositions = {
    Vector3.new(0, 0, -1),
    Vector3.new(0, -1, 0),
    Vector3.new(-1, 0, 0),
    Vector3.new(0, 1, 0),
    Vector3.new(1, 0, 0)
}

local SpawnCache = {}
SpawnCache = {
    currentAddition = SpawnCache.currentAddition or 0,
    latency = SpawnCache.latency or 0,
    updateDebt = 0,
    spawnTime = os.clock(),
    spawned = true
}

local Skyboxes = {
    ['Purple Nebula'] = {['SkyboxBk'] = 'rbxassetid://159454299',['SkyboxDn'] = 'rbxassetid://159454296',['SkyboxFt'] = 'rbxassetid://159454293',['SkyboxLf'] = 'rbxassetid://159454286',['SkyboxRt'] = 'rbxassetid://159454300',['SkyboxUp'] = 'rbxassetid://159454288'},
    ['Night Sky'] = {['SkyboxBk'] = 'rbxassetid://12064107',['SkyboxDn'] = 'rbxassetid://12064152',['SkyboxFt'] = 'rbxassetid://12064121',['SkyboxLf'] = 'rbxassetid://12063984',['SkyboxRt'] = 'rbxassetid://12064115',['SkyboxUp'] = 'rbxassetid://12064131'},
    ['Pink Daylight'] = {['SkyboxBk'] = 'rbxassetid://271042516',['SkyboxDn'] = 'rbxassetid://271077243',['SkyboxFt'] = 'rbxassetid://271042556',['SkyboxLf'] = 'rbxassetid://271042310',['SkyboxRt'] = 'rbxassetid://271042467',['SkyboxUp'] = 'rbxassetid://271077958'},
    ['Setting Sun'] = {['SkyboxBk'] = 'rbxassetid://626460377',['SkyboxDn'] = 'rbxassetid://626460216',['SkyboxFt'] = 'rbxassetid://626460513',['SkyboxLf'] = 'rbxassetid://626473032',['SkyboxRt'] = 'rbxassetid://626458639',['SkyboxUp'] = 'rbxassetid://626460625'},
    ['Fade Blue'] = {['SkyboxBk'] = 'rbxassetid://153695414',['SkyboxDn'] = 'rbxassetid://153695352',['SkyboxFt'] = 'rbxassetid://153695452',['SkyboxLf'] = 'rbxassetid://153695320',['SkyboxRt'] = 'rbxassetid://153695383',['SkyboxUp'] = 'rbxassetid://153695471'},
    ['Elegant Morning'] = {['SkyboxBk'] = 'rbxassetid://153767241',['SkyboxDn'] = 'rbxassetid://153767216',['SkyboxFt'] = 'rbxassetid://153767266',['SkyboxLf'] = 'rbxassetid://153767200',['SkyboxRt'] = 'rbxassetid://153767231',['SkyboxUp'] = 'rbxassetid://153767288'}
}

if not isfolder('Northern') or not isfolder('Northern/Phantom Forces') or not isfolder('Northern/Phantom Forces/asset') or not isfolder('Northern/hit sounds') or not isfolder("Northern/Phantom Forces/configs") then
    makefolder('Northern')
    makefolder('Northern/Phantom Forces')
    makefolder('Northern/Phantom Forces/asset')
    makefolder("Northern/Phantom Forces/configs")
    makefolder('Northern/hit sounds')
end

Library,flags = loadstring(base64.decode'')()
flags = Library.Flags

----------------------------------------------[Settings & Cache]------------------------------------------------------------------

local Ragebot = {
	Targets = {},
    LastHit = os.clock(),
    Target = nil,
    LastTeleport = os.clock(),
	Shots = {},
    Index = 0,
}

local Network = {
	Connections = {},
	Client = nil,
	ClockDependant = {
		["newbullets"] = 3,
		["equip"] = 2,
		["spotplayers"] = 2,
		["updatesight"] = 3,
		["knifehit"] = 4,
		["newgrenade"] = 3,
		["repupdate"] = 3,
		["bullethit"] = 6,
	},
	Shift = 0,
	Repstop = false,
	LastRepUpdate = nil
}

local Visuals = {
    Materials = {
		["ForceField"] = Enum.Material.ForceField,
		["SmoothPlastic"] = Enum.Material.SmoothPlastic,
		["Glass"] = Enum.Material.Glass,
		["Neon"] = Enum.Material.Neon,
		["Plastic"] = Enum.Material.Plastic,
	},
	BulletTracers = {
		["Default"] = "rbxassetid://446111271",
		["Beam"] = "rbxassetid://7151777149",
		["Ion Beam"] = "rbxassetid://2950987173",
		["Missing Texture"] = "rbxassetid://1541381206",
		["Skibidy Toilet"] = "rbxassetid://14488881439"
	},
    Textures = {
        ["Default"] = "rbxassetid://446111271",
        ['Artifact Energy'] = 'rbxassetid://4504367541',
        ['Flaming Plasma'] = 'rbxassetid://2060292619',
        ['Lightning Cast'] = 'rbxassetid://123111500',
        ['Blast Shield'] = 'rbxassetid://49942836',
        ['Alien Field'] = 'rbxassetid://2930247814',
        ['Antimatter'] = 'rbxassetid://4494641460',
        ['Hologram'] = 'rbxassetid://1478668577',
        ['Mayhem'] = 'rbxassetid://459487304',
        ['Mesmer'] = 'rbxassetid://459487304',
        ["Groove"] = "rbxassetid://10785404176",
		["Cloud"] = "rbxassetid://5176277457",
		["Sky"] = "rbxassetid://1494603972",
		["Smudge"] = "rbxassetid://6096634060",
		["Scrapes"] = "rbxassetid://6248583558",
		["Galaxy"] = "rbxassetid://1120738433",
		["Stars"] = "rbxassetid://598201818",
		["Rainbow"] = "rbxassetid://10037165803",
		["Beam"] = "rbxassetid://7151777149",
		["Ion Beam"] = "rbxassetid://2950987173",
		["Missing Texture"] = "rbxassetid://1541381206",
		["Skibidy Toilet"] = "rbxassetid://14488881439"
    },
    HitSounds = {
        ["AR2 Head"] = "2062016772",
        ["AR2 Body"] = "2062015952",
        ["BB Body"] = "4645745735",
        ["BB Kill"] = "2636743632",
        ["Neverlose"] = "8726881116",
        ["Gamesense"] = "4817809188",
        ["Baimware"] = "3124331820",
        ["Steve"] = "4965083997",
        ["Skeet"] = "4753603610",
        ["Body"] = "3213738472",
        ["Ding"] = "7149516994",
        ["Mario"] = "2815207981",
        ["Minecraft"] = "6361963422",
        ["Among Us"] = "5700183626",
        ["Button"] = "12221967",
        ["Oof"] = "4792539171",
        ["Osu"] = "7149919358",
        ["Osu Combobreak"] = "3547118594",
        ["Bambi"] = "8437203821",
        ["Click"] = "8053704437",
        ["Snow"] = "6455527632",
        ["Stone"] = "3581383408",
        ["Rust"] = "1255040462",
        ["Splat"] = "12222152",
        ["Bell"] = "6534947240",
        ["Slime"] = "6916371803",
        ["Saber"] = "8415678813",
        ["Bat"] = "3333907347",
        ["Bubble"] = "6534947588",
        ["Pick"] = "1347140027",
        ["Pop"] = "198598793",
        ["EmptyGun"] = "203691822",
        ["Bamboo"] = "3769434519",
        ["Stomp"] = "200632875",
        ["Bag"] = "364942410",
        ["Hitmarker"] = "8543972310",
        ["LaserSlash"] = "199145497",
        ["RailGunF"] = "199145534",
        ["Bruh"] = "4275842574",
        ["Crit"] = "296102734",
        ["Bonk"] = "3765689841",
        ["Clink"] = "711751971",
        ["CoD"] = "160432334",
        ["Lazer Beam"] = "130791043",
        ["Windows XP Error"] = "160715357",
        ["Windows XP Ding"] = "489390072",
        ["HL Med Kit"] = "4720445506",
        ["HL Door"] = "4996094887",
        ["HL Crowbar"] = "546410481",
        ["HL Revolver"] = "1678424590",
        ["HL Elevator"] = "237877850",
        ["TF2 HitSound"] = "3455144981",
        ["TF2 Squasher"] = "3466981613",
        ["TF2 Retro"] = "3466984142",
        ["TF2 Space"] = "3466982899",
        ["TF2 Vortex"] = "3466980212",
        ["TF2 Beepo"] = "3466987025",
        ["TF2 Bat"] = "3333907347",
        ["TF2 Pow"] = "679798995",
        ["TF2 You Suck"] = "1058417264",
        ["Quake Hitsound"] = "4868633804",
        ["Fart"] = "131314452",
        ["Fart2"] = "6367774932",
        ["FortniteGuns"] = "3008769599"
    }
}

local Utility = {}

local Movement = {}

local ESP = {
    Rainbow = false,
    RainbowSpeed = 5,
    Font = Library.Font,
    Teammates = {
        Enabled = false,
        TextSize = 13,
        MaxDistance = 1000,
        FriendcheckRGB = Color3.new(0.549019,1,0.623529),
        VisibleCheck = false,VisibleCheckRGB = Color3.new(0.980392,0.388235,0.388235),VisibleCheckDistance = 3000,
        Chams = {
            Enabled = false,
            Mode = 'AlwaysOnTop',
            FillRGB = Color3.fromRGB(255,255,255),
            Fill_Transparency = 1,
            OutlineRGB = Color3.fromRGB(255,255,255),
            Outline_Transparency = 1,
            VisibleCheck = false,
        },
        Names = {
            Enabled = false,
            Animate = true,
            Rainbow = false,
            RGB = Color3.fromRGB(255,255,255),Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Flags = {
            Enabled = false,
        },
        Distances = {
            Enabled = false,
            Animate = true,
            Rainbow = false,
            Position = "Text",
            RGB = Color3.fromRGB(255,255,255),Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Weapons = {
            Animate = true,
            Rainbow = false,
            Enabled = false,WeaponTextRGB = Color3.fromRGB(255,255,255),
            Outlined = true,Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Healthbar = {
            Enabled = false,
            Rainbow = false,
            RainbowText = false,
            HealthTextGradient1 = Color3.new(),
            HealthTextGradient2 = Color3.new(),
            HealthText = false,Lerp = false,RGB = Color3.new(1,1,1),HealthyColor = Color3.new(0,1,0),DyingColor = Color3.new(1,0,0),HealthTextRGB = Color3.fromRGB(255,255,255),
            Width = 2,
            Gradient = true,GradientRGB1 = Color3.fromRGB(0,0,0),GradientRGB2 = Color3.fromRGB(112,112,112),GradientRGB3 = Color3.fromRGB(255,255,255)
        },
        Boxes = {
            Size = 0.2,
            Animate = true,
            Rainbow = false,
            FullBox = false,
            RotationSpeed = 300,
            Gradient = true,GradientRGB1 = Color3.fromRGB(255,255,255),GradientRGB2 = Color3.fromRGB(0,0,0),
            GradientFillRGB1 = Color3.fromRGB(255,255,255),GradientFillRGB2 = Color3.fromRGB(0,0,0),
            Filled = {Enabled = false,Transparency = 0,RGB = Color3.fromRGB(0,0,0)}
        },
    },
    Enemies = {
        Enabled = false,
        TextSize = 13,
        MaxDistance = 1000,
        FriendcheckRGB = Color3.new(0.549019,1,0.623529),
        VisibleCheck = false,VisibleCheckRGB = Color3.new(0.980392,0.388235,0.388235),VisibleCheckDistance = 3000,
        Chams = {
            Enabled = false,
            Mode = 'AlwaysOnTop',
            FillRGB = Color3.fromRGB(255,255,255),
            Fill_Transparency = 1,
            OutlineRGB = Color3.fromRGB(255,255,255),
            Outline_Transparency = 1,
            VisibleCheck = false,
        },
        Names = {
            Enabled = false,
            Animate = true,
            Rainbow = false,
            RGB = Color3.fromRGB(255,255,255),Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Flags = {
            Enabled = false,
        },
        Distances = {
            Enabled = false,
            Animate = true,
            Rainbow = false,
            Position = "Text",
            RGB = Color3.fromRGB(255,255,255),Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Weapons = {
            Animate = true,
            Rainbow = false,
            Enabled = false,WeaponTextRGB = Color3.fromRGB(255,255,255),
            Outlined = true,Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Healthbar = {
            Enabled = false,
            Rainbow = false,
            RainbowText = false,
            HealthTextGradient1 = Color3.new(),
            HealthTextGradient2 = Color3.new(),
            HealthText = false,Lerp = false,RGB = Color3.new(1,1,1),HealthyColor = Color3.new(0,1,0),DyingColor = Color3.new(1,0,0),HealthTextRGB = Color3.fromRGB(255,255,255),
            Width = 2,
            Gradient = true,GradientRGB1 = Color3.fromRGB(0,0,0),GradientRGB2 = Color3.fromRGB(112,112,112),GradientRGB3 = Color3.fromRGB(255,255,255),
        },
        Boxes = {
            Size = 0.2,
            Animate = true,
            Rainbow = false,
            FullBox = false,
            RotationSpeed = 300,
            Gradient = true,GradientRGB1 = Color3.fromRGB(255,255,255),GradientRGB2 = Color3.fromRGB(0,0,0),
            GradientFillRGB1 = Color3.fromRGB(255,255,255),GradientFillRGB2 = Color3.fromRGB(0,0,0),
            Filled = {Enabled = false,Transparency = 0,RGB = Color3.fromRGB(0,0,0)},
        },
    },
    LocalPlayer = {
        Enabled = false,
        TextSize = 13,
        MaxDistance = 1000,
        FriendcheckRGB = Color3.new(0.549019,1,0.623529),
        VisibleCheck = false,VisibleCheckRGB = Color3.new(0.980392,0.388235,0.388235),VisibleCheckDistance = 3000,
        Chams = {
            Enabled = false,
            Mode = 'AlwaysOnTop',
            FillRGB = Color3.fromRGB(255,255,255),
            Fill_Transparency = 1,
            OutlineRGB = Color3.fromRGB(255,255,255),
            Outline_Transparency = 1,
            VisibleCheck = false,
        },
        Names = {
            Enabled = false,
            Animate = true,
            Rainbow = false,
            RGB = Color3.fromRGB(255,255,255),Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Flags = {
            Enabled = false,
        },
        Distances = {
            Enabled = false,
            Animate = true,
            Rainbow = false,
            Position = "Text",
            RGB = Color3.fromRGB(255,255,255),Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Weapons = {
            Animate = true,
            Rainbow = false,
            Enabled = false,WeaponTextRGB = Color3.fromRGB(255,255,255),
            Outlined = true,Gradient1 = Color3.new(),Gradient2 = Color3.new()
        },
        Healthbar = {
            Enabled = false,
            Rainbow = false,
            RainbowText = false,
            HealthTextGradient1 = Color3.new(),
            HealthTextGradient2 = Color3.new(),
            HealthText = false,Lerp = false,RGB = Color3.new(1,1,1),HealthyColor = Color3.new(0,1,0),DyingColor = Color3.new(1,0,0),HealthTextRGB = Color3.fromRGB(255,255,255),
            Width = 2,
            Gradient = true,GradientRGB1 = Color3.fromRGB(0,0,0),GradientRGB2 = Color3.fromRGB(112,112,112),GradientRGB3 = Color3.fromRGB(255,255,255),
        },
        Boxes = {
            Size = 0.2,
            Animate = true,
            Rainbow = false,
            FullBox = false,
            RotationSpeed = 300,
            Gradient = true,GradientRGB1 = Color3.fromRGB(255,255,255),GradientRGB2 = Color3.fromRGB(0,0,0),
            GradientFillRGB1 = Color3.fromRGB(255,255,255),GradientFillRGB2 = Color3.fromRGB(0,0,0),
            Filled = {Enabled = false,Transparency = 0,RGB = Color3.fromRGB(0,0,0)},
        },
    },
    Players = {}
}

--------------------------------//UTILITIES//------------------------------------

function Utility.GetHitSounds()
    local Configs = {}
    for _,HitSoundFile in next,listfiles'Northern\\hit sounds' do
        Configs[#Configs+1] = HitSoundFile:gsub('Northern\\hit sounds\\',''):gsub('Northern/hit sounds/',''):gsub('Northern/hit sounds\\','')
    end
    return Configs
end

function Utility.UpdateConfigList()
    local List = {}
    for _,file in next,listfiles'Northern\\Phantom Forces\\configs' do
        List[#List + 1] = file:gsub('Northern/Phantom Forces/configs/',''):gsub('Northern/Phantom Forces/configs\\',''):gsub('Northern\\Phantom Forces\\configs\\',''):gsub('.cfg','')
    end
    ConfigList:Refresh(List)
end

function Utility:GetIndexFromTable(Table)
    local Index = {}
    for I,_ in next,Table do
        Index[#Index+1] = I
    end
    return Index
end

function Utility:Create(Class:string,Properties:table)
    local _Instance = typeof(Class) == 'string' and Instance.new(Class) or Class
    for Property,Value in next,Properties do
        _Instance[Property] = Value
    end
    return _Instance
end

function Utility.FindChild(Parent:Instance,ChildName:string)
    return pcall(function()return Parent[ChildName]end)and Parent[ChildName]
end

function Utility.CreateLoop(Wait:number,Function:'function')
    task.spawn(function()
        while true do
            Function()
            task.wait(Wait)
        end
    end)
end

function Utility:PlaySound(id, volume, pitch)
    return Utility:Create("Sound", {
        Parent = camera,
        Volume = volume / 100,
        Pitch = pitch / 100,
        SoundId = tostring(id),
        PlayOnRemove = true
    }):Destroy()
end

function Utility:GetEntry(player)
    return player and ReplicationInterface.getEntry(player)
end

function Utility:GetThirdPersonObject(player)
    local Entry = Utility:GetEntry(player)

    if Entry then
        return Entry._thirdPersonObject
    end

    return
end

function Utility:GetCharacter(player)
    local Entry = Utility:GetEntry(player)
    if Entry then
        return Entry._thirdPersonObject and Entry._thirdPersonObject._characterModel and Entry._thirdPersonObject._characterModelHash
    end

    return
end

function Utility:GetHealth(player)
    local Entry = Utility:GetEntry(player)

    if Entry then
        return Entry:getHealth()
    end

    return 0 -- ??
end

function Utility:GetWeapon(player)
    local Entry = Utility:GetEntry(player)

    if Entry then
        local ThirdPersonObject = Entry._thirdPersonObject
        if ThirdPersonObject then
            return ThirdPersonObject._weaponname or ""
        end
    end

    return "" -- ??
end

function Utility:GetPlayerStat(player, stat)
    local Entry = LeaderboardInterface.getEntry(player)

    if not (Entry and stat) then
        return
    end

    return Entry:getStat(stat) -- ??
end

function Utility:GetLocalWeapon()
    local WeaponController = WeaponControllerInterface:getActiveWeaponController()

    return WeaponController and WeaponController._activeWeaponRegistry[WeaponController._activeWeaponIndex], WeaponController
end

function Utility:Trajectory(o, a, t, s)
    local f = -a
    local ld = t - o
    local a = f:Dot(f)
    local b = 4 * ld:Dot(ld)
    local k = (4 * (f:Dot(ld) + s * s)) / (2 * a)
    local v = (k * k - b / a) ^ 0.5
    local t, t0 = k - v, k + v

    t = t < 0 and t0 or t; t = t ^ 0.5
    return f * t / 2 + ld / t, t
end

---------------------------------//VISUALS//---------------------------------------

function Visuals.UpdateSkybox(Sky:string)
    pcall(function()ls.CustomSkybox:Destroy()end)
    pcall(function()ls.SunRays.Enabled=false end)
    local CustomSkybox = Utility:Create('Sky',{Name = 'customsky',SunTextureId = 'rbxassetid://',CelestialBodiesShown = 'rbxassetid://',Parent = ls})
    if not Skyboxes[Sky] then return end
    for Side,Id in next,Skyboxes[Sky] do
        CustomSkybox[Side] = Id
    end
end

function Visuals:CreateBulletTracer(origin, endpos, color, time, decal)
    local Decal = Visuals.Textures[decal]

    local OriginAttachment = Utility:Create("Attachment", {
        Position = origin,
        Parent = ws.Terrain
    })

    local EndAttachment = Utility:Create("Attachment", {
        Position = endpos,
        Parent = ws.Terrain
    })

    local Beam = Utility:Create("Beam", {
        Texture = Decal,
        LightEmission = 1,
        LightInfluence = 0,
        TextureSpeed = 10,
        Color = ColorSequence.new{ColorSequenceKeypoint.new(0,color),ColorSequenceKeypoint.new(1,color)},
        Width0 = 1.2,
        Width1 = 1.2,
        Attachment0 = OriginAttachment,
        Attachment1 = EndAttachment,
        Enabled = true,
        Parent = ws
    })

    Debris:AddItem(OriginAttachment, time)
    Debris:AddItem(EndAttachment, time)
    Debris:AddItem(Beam, time)
end

function Visuals.Update()
    if flags['custom id'] then
        CustomSoundID = getgenv().getcustomasset('Northern/hit sounds/'..flags['custom id'],true)
    end
    if flags['world skybox'] then
        Visuals.UpdateSkybox(flags['world skyboxtype'])
    end
end

---------------------------------//MOVEMENT//-----------------------------------------

function Movement.Update(Delta:number)
    local MovementDirection,Direction = Zero,camera.CFrame.LookVector * Vector3.new(1,0,1)

    local CharacterObject = CharacterInterface.getCharacterObject()
    if not CharacterObject then return end

    if flags['bhop'] and uis:IsKeyDown(Enum.KeyCode.Space) then
        CharacterObject._lastJumpTime = 0
        CharacterObject:jump(flags['jump power'])
    end

    if not flags['move'] or not flags['speed bind'] then return end

    if uis:IsKeyDown(Enum.KeyCode.W) then MovementDirection += Direction end
    if uis:IsKeyDown(Enum.KeyCode.S) then MovementDirection -= Direction end
    if uis:IsKeyDown(Enum.KeyCode.D) then MovementDirection += Vector3.new(-Direction.Z,0,Direction.X) end
    if uis:IsKeyDown(Enum.KeyCode.A) then MovementDirection += Vector3.new(Direction.Z,0,-Direction.X) end

    if MovementDirection.Unit.X ~= MovementDirection.Unit.X then return end

    local AntiNoclip = ws:Raycast(CharacterObject._rootPart.Position,MovementDirection*3+CharacterObject._rootPart.Velocity*Delta,RayParams)
    if AntiNoclip and AntiNoclip.Instance then return end

    CharacterObject._rootPart.CFrame += MovementDirection.Unit * flags['movespeed'] * Delta
end
---------------------------//ESP//------------------------------

ESP.ESPHolder = Utility:Create("ScreenGui",{Parent = Hidden,Name = "操E你S妈P的"})

function ESP.InOut(a,b,Speed)
    Speed = Speed or 1 / 8
    if (math.abs(b - a) < Speed) then
        return b
    end
    return a + (b - a) * Speed
end

function ESP:GetWeapon(Player)
    local thirdPersonObject = Utility:GetThirdPersonObject(Player)
    return thirdPersonObject and thirdPersonObject._weaponName
end

function ESP.AddPlayer(Player)
    if ESP.Players[Player] then return end
    local Settings = ESP.Enemies
    ESP.Players[Player] = {
        health = 0,
        deadpos = nil,
        Name = Utility:Create("TextLabel",{Parent = ESP.ESPHolder,Position = UDim2.new(0.5,0,0,-11),Size = UDim2.new(0,100,0,20),AnchorPoint = Vector2.new(0.5,0.5),BackgroundTransparency = 1,TextColor3 = Color3.fromRGB(255,255,255),FontFace = ESP.Font or 2,TextSize = ESP.FontSize,TextStrokeTransparency = 0,TextStrokeColor3 = Color3.fromRGB(0,0,0),RichText = true}),
        NameGradient = Utility:Create("UIGradient",{Parent = ESP.ESPHolder,Enabled = Settings.Boxes.Gradient,Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Settings.Boxes.GradientRGB1),ColorSequenceKeypoint.new(1,Settings.Boxes.GradientRGB2)}}),
        Distance = Utility:Create("TextLabel",{Parent = ESP.ESPHolder,Position = UDim2.new(0.5,0,0,11),Size = UDim2.new(0,100,0,20),AnchorPoint = Vector2.new(0.5,0.5),BackgroundTransparency = 1,TextColor3 = Color3.fromRGB(255,255,255),FontFace = ESP.Font or 2,TextSize = ESP.FontSize,TextStrokeTransparency = 0,TextStrokeColor3 = Color3.fromRGB(0,0,0),RichText = true}),
        DistanceGradient = Utility:Create("UIGradient",{Parent = ESP.ESPHolder,Enabled = Settings.Boxes.Gradient,Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Settings.Boxes.GradientRGB1),ColorSequenceKeypoint.new(1,Settings.Boxes.GradientRGB2)}}),
        Weapon = Utility:Create("TextLabel", {Parent = ESP.ESPHolder, Position = UDim2.new(0.5, 0, 0, 31), Size = UDim2.new(0, 100, 0, 20), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), FontFace = ESP.Font or 2, TextSize = ESP.FontSize, TextStrokeTransparency = 0, TextStrokeColor3 = Color3.fromRGB(0, 0, 0), RichText = true}),
        WeaponGradient = Utility:Create("UIGradient", {Parent = ESP.ESPHolder, Enabled = Settings.Boxes.Gradient, Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Settings.Boxes.GradientRGB1), ColorSequenceKeypoint.new(1, Settings.Boxes.GradientRGB2)}}),
        Box = Utility:Create("Frame",{Parent = ESP.ESPHolder,BackgroundTransparency = 0.75,BackgroundColor3 = Color3.fromRGB(0,0,0),BorderSizePixel = 0,Name = 'Box'}),
        BoxOutlineHolder = Utility:Create("Frame",{Parent = ESP.ESPHolder,BackgroundTransparency = 0.75,BackgroundColor3 = Color3.fromRGB(0,0,0),BorderSizePixel = 0,Name = 'BoxOutlineHolder'}),
        BoxOutline = Utility:Create("UIStroke",{Parent = ESP.ESPHolder.Box,Name = 'BoxOutline',Enabled = Settings.Boxes.Gradient,Transparency = 0,Color = Color3.fromRGB(255,255,255),LineJoinMode = Enum.LineJoinMode.Miter}),
        FullBox = Utility:Create("UIStroke",{Parent = ESP.ESPHolder.Box,Name = 'BoxOut',Enabled = Settings.Boxes.Gradient,Transparency = 0,Color = Color3.fromRGB(255,255,255),LineJoinMode = Enum.LineJoinMode.Miter}),
        Gradient1 = Utility:Create("UIGradient",{Parent = ESP.ESPHolder,Enabled = Settings.Boxes.GradientFill,Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Settings.Boxes.GradientFillRGB1),ColorSequenceKeypoint.new(1,Settings.Boxes.GradientFillRGB2)}}),
        Gradient2 = Utility:Create("UIGradient",{Parent = ESP.ESPHolder,Enabled = Settings.Boxes.Gradient,Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Settings.Boxes.GradientRGB1),ColorSequenceKeypoint.new(1,Settings.Boxes.GradientRGB2)}}),
        Healthbar = Utility:Create("Frame",{Parent = ESP.ESPHolder,Name = 'Healthbar',BackgroundColor3 = Color3.fromRGB(255,255,255),BackgroundTransparency = 0}),
        BehindHealthbar = Utility:Create("Frame",{Parent = ESP.ESPHolder,ZIndex = -1,BackgroundColor3 = Color3.fromRGB(0,0,0),BackgroundTransparency = 0}),
        HealthbarGradient = Utility:Create("UIGradient",{Parent = ESP.ESPHolder,Enabled = Settings.Healthbar.Gradient,Rotation = -90,Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Settings.Healthbar.GradientRGB1),ColorSequenceKeypoint.new(0.5,Settings.Healthbar.GradientRGB2),ColorSequenceKeypoint.new(1,Settings.Healthbar.GradientRGB3)}}),
        HealthText = Utility:Create("TextLabel",{Parent = ESP.ESPHolder,Position = UDim2.new(0.5,0,0,31),Size = UDim2.new(0,100,0,20),AnchorPoint = Vector2.new(0.5,0.5),BackgroundTransparency = 1,TextColor3 = Color3.fromRGB(255,255,255),FontFace = ESP.Font or 2,TextSize = ESP.FontSize,TextStrokeTransparency = 0,TextStrokeColor3 = Color3.fromRGB(0,0,0)}),
        HealthTextGradient = Utility:Create("UIGradient",{Parent = ESP.ESPHolder,Enabled = Settings.Boxes.Gradient,Color = ColorSequence.new{ColorSequenceKeypoint.new(0,Settings.Boxes.GradientRGB1),ColorSequenceKeypoint.new(1,Settings.Boxes.GradientRGB2)}}),
        Chams = Utility:Create("Highlight",{Parent = ESP.ESPHolder,Enabled = true}),
        HideESP = function()
            for _,obj in next,ESP.Players[Player] do
                if typeof(obj) ~= 'Instance' then continue end
                if obj.ClassName == 'Highlight' or obj.ClassName == 'UIStroke' or obj.ClassName == 'UIGradient' then obj.Enabled = false continue end
                obj.Visible = false
            end
        end
    }
end

function ESP.RemovePlayer(Player)
    for _,_Instance in next,ESP.Players[Player] do
        if typeof(_Instance) ~= 'Instance' then continue end
        _Instance:Destroy()
    end
    ESP.Players[Player] = nil
end

function ESP.UpdateSettings()
    task.spawn(pcall,function()
        ESP.Rainbow = flags['rainbow']
        ESP.RainbowSpeed = flags['rainbow speed']
        ESP.Enemies.Enabled = flags['esp enable']
        ESP.LocalPlayer.Enabled = flags['lp enable']
        ESP.Teammates.Enabled = flags['team enable']
        if flags['esp enable'] then
            ESP.Enemies.Boxes.FullBox = flags['esp box']
            ESP.Enemies.Names.Enabled = flags['esp name']
            ESP.Enemies.Chams.Enabled = flags['esp chams']
            ESP.Enemies.Chams.Mode = flags['chams mode']
            ESP.Enemies.Healthbar.Enabled = flags['esp hp']
            ESP.Enemies.Distances.Enabled = flags['esp dist']
            ESP.Enemies.VisibleCheck = flags['vis enabled']
            ESP.Enemies.VisibleCheckRGB = flags['esp viscolor'].Color
            ESP.Enemies.TextSize = flags['esp txtsize']
            ESP.Enemies.VisibleCheckDistance = flags['esp vdist']
            ESP.Enemies.Healthbar.HealthText = flags['esp hptxt']
            ESP.Enemies.Boxes.Size = flags['box size']
            ESP.Enemies.MaxDistance = flags['esp maxdist']
            ESP.Enemies.Healthbar.Width = flags['esp hp size']
            ESP.Enemies.Friendcheck = flags['esp wl']
            ESP.Enemies.Weapons.Enabled = flags['esp weapon']
            ESP.Enemies.Weapons.Gradient1 = flags['esp weaponcolor'].Color
            ESP.Enemies.Weapons.Gradient2 = flags['esp weaponcolor2'].Color
            ESP.Enemies.FriendcheckRGB = flags['esp wlcolor'].Color
            ESP.Enemies.Healthbar.DyingColor = flags['hp color2'].Color
            ESP.Enemies.Healthbar.HealthyColor = flags['hp color1'].Color
            ESP.Enemies.Names.Gradient1 = flags['esp namecolor'].Color
            ESP.Enemies.Names.Gradient2 = flags['esp namecolor2'].Color
            ESP.Enemies.Distances.Gradient1 = flags['esp distcolor'].Color
            ESP.Enemies.Distances.Gradient2 = flags['esp distcolor2'].Color
            ESP.Enemies.Healthbar.HealthTextGradient1 = flags['esp hptxtcolor'].Color
            ESP.Enemies.Healthbar.HealthTextGradient2 = flags['esp hptxtcolor2'].Color
            ESP.Enemies.Healthbar.RGB = flags['bar color'].Color
            ESP.Enemies.Chams.FillRGB = flags['chams fill color'].Color
            ESP.Enemies.Chams.OutlineRGB = flags['chams out color '].Color
            ESP.Enemies.Healthbar.GradientRGB1 = flags['hp grad color'].Color
            ESP.Enemies.Healthbar.GradientRGB2 = flags['hp grad color2'].Color
            ESP.Enemies.Healthbar.GradientRGB3 = flags['hp grad color3'].Color
            ESP.Enemies.Boxes.Filled.Enabled = table.find(flags['esp sets'],'Filled Box')
            ESP.Enemies.Boxes.Filled.RGB = flags['esp box fill color'].Color
            ESP.Enemies.Boxes.GradientRGB1 = flags['esp box grad1'].Color
            ESP.Enemies.Boxes.GradientRGB2 = flags['esp box grad2'].Color
            ESP.Enemies.Boxes.Filled.Transparency = flags['esp box fill color'].Transparency
            ESP.Enemies.Chams.Outline_Transparency = flags['chams out color '].Transparency
            ESP.Enemies.Chams.Fill_Transparency = flags['chams fill color'].Transparency
            --ESP.Enemies.teamColor = table.find(flags['esp sets'],'Use Team Color')
            ESP.Enemies.Healthbar.Gradient = table.find(flags['esp sets'],'Healthbar Gradient')
            ESP.Enemies.Healthbar.Rainbow = flags['rainbow'] and table.find(flags['esp sets'],'Rainbow Healthbar')
            ESP.Enemies.Healthbar.Lerp = table.find(flags['esp sets'],'Health Lerp')
            ESP.Enemies.Boxes.Animate = table.find(flags['esp sets'],'Box Animation')
            ESP.Enemies.Boxes.Rainbow = flags['rainbow'] and table.find(flags['esp sets'],'Rainbow Box')
            ESP.Enemies.Names.Animate = table.find(flags['esp sets'],'Name Animation')
            ESP.Enemies.Distances.Animate = table.find(flags['esp sets'],'Distance Animation')
            ESP.Enemies.Weapons.Animate = table.find(flags['esp sets'],'Weapon Animation')
            ESP.Enemies.Healthbar.Animate = table.find(flags['esp sets'],'Health Text Animation')
            ESP.Enemies.Healthbar.RainbowText = flags['rainbow'] and table.find(flags['esp sets'],'Rainbow Health Text')
            ESP.Enemies.Names.Rainbow = flags['rainbow'] and table.find(flags['esp sets'],'Rainbow Name')
            ESP.Enemies.Weapons.Rainbow = flags['rainbow'] and table.find(flags['esp sets'],'Rainbow Weapon')
            ESP.Enemies.Distances.Rainbow = flags['rainbow'] and table.find(flags['esp sets'],'Rainbow Distance')
            --ESP.Enemies.autoTextSize = table.find(flags['esp sets'])
        end
        if flags['lp enable'] then
            ESP.LocalPlayer.Boxes.FullBox = flags['lp box']
            ESP.LocalPlayer.Names.Enabled = flags['lp name']
            ESP.LocalPlayer.Chams.Enabled = flags['lp chams']
            ESP.LocalPlayer.Chams.Mode = flags['lp chams mode']
            ESP.LocalPlayer.Healthbar.Enabled = flags['lp hp']
            ESP.LocalPlayer.Distances.Enabled = flags['lp dist']
            ESP.LocalPlayer.VisibleCheck = flags['lp vis enabled']
            ESP.LocalPlayer.VisibleCheckRGB = flags['lp viscolor'].Color
            ESP.LocalPlayer.TextSize = flags['lp txtsize']
            ESP.LocalPlayer.VisibleCheckDistance = flags['lp vdist']
            ESP.LocalPlayer.Healthbar.HealthText = flags['lp hptxt']
            ESP.LocalPlayer.Boxes.Size = flags['lp box size']
            ESP.LocalPlayer.MaxDistance = flags['lp maxdist']
            ESP.LocalPlayer.Healthbar.Width = flags['lp hp size']
            ESP.LocalPlayer.Friendcheck = flags['lp wl']
            ESP.LocalPlayer.Weapons.Enabled = flags['lp weapon']
            ESP.LocalPlayer.Weapons.Gradient1 = flags['lp weaponcolor'].Color
            ESP.LocalPlayer.Weapons.Gradient2 = flags['lp weaponcolor2'].Color
            ESP.LocalPlayer.FriendcheckRGB = flags['lp wlcolor'].Color
            ESP.LocalPlayer.Healthbar.DyingColor = flags['lp hp color2'].Color
            ESP.LocalPlayer.Healthbar.HealthyColor = flags['lp hp color1'].Color
            ESP.LocalPlayer.Names.Gradient1 = flags['lp namecolor'].Color
            ESP.LocalPlayer.Names.Gradient2 = flags['lp namecolor2'].Color
            ESP.LocalPlayer.Distances.Gradient1 = flags['lp distcolor'].Color
            ESP.LocalPlayer.Distances.Gradient2 = flags['lp distcolor2'].Color
            ESP.LocalPlayer.Healthbar.HealthTextGradient1 = flags['lp hptxtcolor'].Color
            ESP.LocalPlayer.Healthbar.HealthTextGradient2 = flags['lp hptxtcolor2'].Color
            ESP.LocalPlayer.Healthbar.RGB = flags['lp bar color'].Color
            ESP.LocalPlayer.Chams.FillRGB = flags['lp chams fill color'].Color
            ESP.LocalPlayer.Chams.OutlineRGB = flags['lp chams out color '].Color
            ESP.LocalPlayer.Healthbar.GradientRGB1 = flags['lp hp grad color'].Color
            ESP.LocalPlayer.Healthbar.GradientRGB2 = flags['lp hp grad color2'].Color
            ESP.LocalPlayer.Healthbar.GradientRGB3 = flags['lp hp grad color3'].Color
            ESP.LocalPlayer.Boxes.Filled.Enabled = table.find(flags['lp sets'],'Filled Box')
            ESP.LocalPlayer.Boxes.Filled.RGB = flags['lp box fill color'].Color
            ESP.LocalPlayer.Boxes.GradientRGB1 = flags['lp box grad1'].Color
            ESP.LocalPlayer.Boxes.GradientRGB2 = flags['lp box grad2'].Color
            ESP.LocalPlayer.Boxes.Filled.Transparency = flags['lp box fill color'].Transparency
            ESP.LocalPlayer.Chams.Outline_Transparency = flags['lp chams out color '].Transparency
            ESP.LocalPlayer.Chams.Fill_Transparency = flags['lp chams fill color'].Transparency
            --ESP.LocalPlayer.teamColor = table.find(flags['lp sets'],'Use Team Color')
            ESP.LocalPlayer.Healthbar.Gradient = table.find(flags['lp sets'],'Healthbar Gradient')
            ESP.LocalPlayer.Healthbar.Lerp = table.find(flags['lp sets'],'Health Lerp')
            ESP.LocalPlayer.Boxes.Animate = table.find(flags['lp sets'],'Box Animation')
            ESP.LocalPlayer.Names.Animate = table.find(flags['lp sets'],'Name Animation')
            ESP.LocalPlayer.Distances.Animate = table.find(flags['lp sets'],'Distance Animation')
            ESP.LocalPlayer.Weapons.Animate = table.find(flags['lp sets'],'Weapon Animation')
            ESP.LocalPlayer.Healthbar.Animate = table.find(flags['lp sets'],'Health Text Animation')
            ESP.LocalPlayer.Healthbar.Rainbow = flags['rainbow'] and table.find(flags['lp sets'],'Rainbow Healthbar')
            ESP.LocalPlayer.Boxes.Rainbow = flags['rainbow'] and table.find(flags['lp sets'],'Rainbow Box')
            ESP.LocalPlayer.Healthbar.RainbowText = flags['rainbow'] and table.find(flags['lp sets'],'Rainbow Health Text')
            ESP.LocalPlayer.Names.Rainbow = flags['rainbow'] and table.find(flags['lp sets'],'Rainbow Name')
            ESP.LocalPlayer.Weapons.Rainbow = flags['rainbow'] and table.find(flags['lp sets'],'Rainbow Weapon')
            ESP.LocalPlayer.Distances.Rainbow = flags['rainbow'] and table.find(flags['lp sets'],'Rainbow Distance')
            --ESP.LocalPlayer.autoTextSize = table.find(flags['lp sets'])
        end
        if flags['team enable'] then
            ESP.Teammates.Boxes.FullBox = flags['team box']
            ESP.Teammates.Names.Enabled = flags['team name']
            ESP.Teammates.Chams.Enabled = flags['team chams']
            ESP.Teammates.Chams.Mode = flags['team chams mode']
            ESP.Teammates.Healthbar.Enabled = flags['team hp']
            ESP.Teammates.Distances.Enabled = flags['team dist']
            ESP.Teammates.VisibleCheck = flags['team vis enabled']
            ESP.Teammates.VisibleCheckRGB = flags['team viscolor'].Color
            ESP.Teammates.TextSize = flags['team txtsize']
            ESP.Teammates.VisibleCheckDistance = flags['team vdist']
            ESP.Teammates.Healthbar.HealthText = flags['team hptxt']
            ESP.Teammates.Boxes.Size = flags['team box size']
            ESP.Teammates.MaxDistance = flags['team maxdist']
            ESP.Teammates.Healthbar.Width = flags['team hp size']
            ESP.Teammates.Friendcheck = flags['team wl']
            ESP.Teammates.Weapons.Enabled = flags['team weapon']
            ESP.Teammates.Weapons.Gradient1 = flags['team weaponcolor'].Color
            ESP.Teammates.Weapons.Gradient2 = flags['team weaponcolor2'].Color
            ESP.Teammates.FriendcheckRGB = flags['team wlcolor'].Color
            ESP.Teammates.Healthbar.DyingColor = flags['team hp color2'].Color
            ESP.Teammates.Healthbar.HealthyColor = flags['team hp color1'].Color
            ESP.Teammates.Names.Gradient1 = flags['team namecolor'].Color
            ESP.Teammates.Names.Gradient2 = flags['team namecolor2'].Color
            ESP.Teammates.Distances.Gradient1 = flags['team distcolor'].Color
            ESP.Teammates.Distances.Gradient2 = flags['team distcolor2'].Color
            ESP.Teammates.Healthbar.HealthTextGradient1 = flags['team hptxtcolor'].Color
            ESP.Teammates.Healthbar.HealthTextGradient2 = flags['team hptxtcolor2'].Color
            ESP.Teammates.Healthbar.RGB = flags['team bar color'].Color
            ESP.Teammates.Chams.FillRGB = flags['team chams fill color'].Color
            ESP.Teammates.Chams.OutlineRGB = flags['team chams out color '].Color
            ESP.Teammates.Healthbar.GradientRGB1 = flags['team hp grad color'].Color
            ESP.Teammates.Healthbar.GradientRGB2 = flags['team hp grad color2'].Color
            ESP.Teammates.Healthbar.GradientRGB3 = flags['team hp grad color3'].Color
            ESP.Teammates.Boxes.Filled.Enabled = table.find(flags['team sets'],'Filled Box')
            ESP.Teammates.Boxes.Filled.RGB = flags['team box fill color'].Color
            ESP.Teammates.Boxes.GradientRGB1 = flags['team box grad1'].Color
            ESP.Teammates.Boxes.GradientRGB2 = flags['team box grad2'].Color
            ESP.Teammates.Boxes.Filled.Transparency = flags['team box fill color'].Transparency
            ESP.Teammates.Chams.Outline_Transparency = flags['team chams out color '].Transparency
            ESP.Teammates.Chams.Fill_Transparency = flags['team chams fill color'].Transparency
            --ESP.Teammates.teamColor = table.find(flags['team sets'],'Use Team Color')
            ESP.Teammates.Healthbar.Gradient = table.find(flags['team sets'],'Healthbar Gradient')
            ESP.Teammates.Healthbar.Lerp = table.find(flags['team sets'],'Health Lerp')
            ESP.Teammates.Boxes.Animate = table.find(flags['team sets'],'Box Animation')
            ESP.Teammates.Healthbar.Rainbow = flags['rainbow'] and table.find(flags['team sets'],'Rainbow Healthbar')
            ESP.Teammates.Boxes.Rainbow = flags['rainbow'] and table.find(flags['team sets'],'Rainbow Box')
            ESP.Teammates.Names.Animate = table.find(flags['team sets'],'Name Animation')
            ESP.Teammates.Distances.Animate = table.find(flags['team sets'],'Distance Animation')
            ESP.Teammates.Weapons.Animate = table.find(flags['team sets'],'Weapon Animation')
            ESP.Teammates.Healthbar.Animate = table.find(flags['team sets'],'Health Text Animation')
            ESP.Teammates.Healthbar.RainbowText = flags['rainbow'] and table.find(flags['team sets'],'Rainbow Health Text')
            ESP.Teammates.Names.Rainbow = flags['rainbow'] and table.find(flags['team sets'],'Rainbow Name')
            ESP.Teammates.Weapons.Rainbow = flags['rainbow'] and table.find(flags['team sets'],'Rainbow Weapon')
            ESP.Teammates.Distances.Rainbow = flags['rainbow'] and table.find(flags['team sets'],'Rainbow Distance')
            --ESP.Teammates.autoTextSize = table.find(flags['team sets'])
        end
    end)
end

function ESP.Render(Delta)
    local CurrentTick = tick()
    RotationAngle += (CurrentTick - Tick) * math.cos(math.pi / 4 * CurrentTick - math.pi / 2)
    Tick = CurrentTick
    if ESP.Rainbow then
        local Speed = Delta * ESP.RainbowSpeed/10
        ESP.Rainbow1 = (ESP.Rainbow1 or 2/3) + Speed
        ESP.Rainbow2 = (ESP.Rainbow2 or ESP.Rainbow1 * (2/3)) + Speed
        ESP.Rainbow3 = (ESP.Rainbow3 or ESP.Rainbow1 * (1/3)) + Speed
        if ESP.Rainbow1 > 1 then ESP.Rainbow1 = Speed end
        if ESP.Rainbow2 > 1 then ESP.Rainbow2 = Speed end
        if ESP.Rainbow3 > 1 then ESP.Rainbow3 = Speed end
    end
    ReplicationInterface.operateOnAllEntries(function(plr, entry)
        local objs = ESP.Players[plr]
        local Settings = ESP[if plr == lp then 'LocalPlayer' elseif (plr.Team ~= lp.Team) then 'Enemies' else 'Teammates']
        if not Settings.Enabled then return objs.HideESP() end

        local ThirdPersonObject = entry._thirdPersonObject
        local HRP = (ThirdPersonObject and (ThirdPersonObject._torso or (ThirdPersonObject._replicationObject and CFrame.new(ThirdPersonObject._replicationObject._receivedPosition))))

        if not HRP and objs.deadpos then
            for objname,obj in next,objs do
                if typeof(obj) ~= 'Instance' or obj.ClassName == 'Highlight' or obj.ClassName == 'UIGradient' then continue end
                local Transparency = (if obj.ClassName == 'TextLabel' then 'TextTransparency' elseif objname == 'FullBox' or objname == 'BoxOutline'  then 'Transparency' else 'BackgroundTransparency')
                if obj[Transparency] < 1 then
                    obj[Transparency] = ESP.InOut(obj[Transparency],1,Delta*flags['trans speed'])
                else
                    obj[Transparency] = 1
                    if objname == 'FullBox' or objname == 'BoxOutline' then continue end
                    obj.Visible = false
                end
            end
            objs.Chams.Enabled = false
        elseif not HRP or not Utility:GetCharacter(plr) then
            return objs.HideESP()
        else
            for objname,obj in next,objs do
                if typeof(obj) ~= 'Instance' or obj.ClassName == 'Highlight' or obj.ClassName == 'UIGradient' then continue end
                local Transparency = (if obj.ClassName == 'TextLabel' then 'TextTransparency' elseif objname == 'FullBox' or objname == 'BoxOutline' then 'Transparency' else 'BackgroundTransparency')
                if objname ~= 'Box' and objname ~= 'BoxOutlineHolder' then obj[Transparency] = 0 continue end
                if Settings.Boxes.Filled.Enabled then obj[Transparency] = Settings.Boxes.Filled.Transparency else obj[Transparency] = 1 continue end
            end
        end

        local Position = (HRP and HRP.Position) or objs.deadpos
        local Dist = (camera.CFrame.Position - (Position or camera.CFrame.Position)).Magnitude
        if Dist > Settings.MaxDistance then return objs.HideESP() end

        local Pos, OnScreen = camera:WorldToScreenPoint(Position)
        if not OnScreen then return objs.HideESP() end

        local scaleFactor = 1 / (Pos.Z * math.tan(math.rad(camera.FieldOfView * 0.5)) * 2) * 1000
        local w,h,health = (camera.ViewportSize.X/409.6) * scaleFactor,(camera.ViewportSize.Y/168) * scaleFactor,(not HRP and 0) or ((Utility:GetHealth(plr)<0 and 0) or Utility:GetHealth(plr)) / 100
        ESP.Players[plr].health = ESP.InOut(ESP.Players[plr].health,health,Delta*flags['hp speed'])
        if HRP then
            objs.deadpos = HRP.Position
        end

        local isfriend = Settings.Friendcheck and lp:IsFriendsWith(plr.UserId)
        local isvisible = not isfriend and (if Settings.VisibleCheck and Dist <= Settings.VisibleCheckDistance then Utility.Combat.VisibleCheck(plr.Character,plr.Character.Head.Position,camera.CFrame.Position,plr) else nil)
        local forcecolor = (isfriend and Settings.FriendcheckRGB) or (isvisible and Settings.VisibleCheckRGB)
        local rgb1,rgb2,rgb3 = Color3.fromHSV(ESP.Rainbow1,1,1),Color3.fromHSV(ESP.Rainbow2,1,1),Color3.fromHSV(ESP.Rainbow3,1,1)
        do -- Chams
            objs.Chams.Enabled = health>0 and Settings.Chams.Enabled
            if objs.Chams.Enabled then
                objs.Chams.FillTransparency = Settings.Chams.Fill_Transparency
                objs.Chams.OutlineTransparency = Settings.Chams.Outline_Transparency
                objs.Chams.Adornee = plr.Character
                objs.Chams.FillColor = (isvisible and Settings.VisibleCheckRGB) or (isfriend and Settings.FriendcheckRGB) or Settings.Chams.FillRGB
                objs.Chams.OutlineColor = (isvisible and Settings.VisibleCheckRGB) or (isfriend and Settings.FriendcheckRGB) or Settings.Chams.OutlineRGB
                objs.Chams.DepthMode = Settings.Chams.Mode
            end
        end
        -- Boxes
        do
            objs.Box.Visible = true
            objs.FullBox.Enabled = Settings.Boxes.FullBox
            objs.BoxOutlineHolder.Visible = true
            objs.BoxOutlineHolder.Parent = objs.Box
            objs.BoxOutlineHolder.Size = UDim2.new(0,w,0,h)
            objs.BoxOutlineHolder.ZIndex = objs.Box.ZIndex - 1
            objs.Box.Position = UDim2.new(0,Pos.X - w / 2,0,Pos.Y - h / 2)
            objs.Box.Size = UDim2.new(0,w,0,h)
            objs.Gradient1.Enabled,objs.Gradient2.Enabled = Settings.Boxes.Filled.Enabled,Settings.Boxes.FullBox
            objs.Box.BackgroundColor3 = Color3.fromRGB(255,255,255)
            objs.FullBox.Parent = objs.Box
            objs.FullBox.Color = (isvisible and Settings.VisibleCheckRGB) or (isfriend and Settings.FriendcheckRGB) or Settings.Boxes.Filled.RGB
            objs.BoxOutline.Parent = objs.BoxOutlineHolder
            objs.BoxOutline.Color = Color3.new()
            objs.BoxOutline.Thickness = 2
            objs.BoxOutline.Enabled = Settings.Boxes.FullBox
            objs.Gradient1.Parent = objs.Box
            objs.Gradient2.Parent = objs.FullBox
            objs.Gradient1.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,forcecolor or (Settings.Boxes.Rainbow and rgb1) or Settings.Boxes.GradientRGB1),ColorSequenceKeypoint.new(.5,forcecolor or (Settings.Boxes.Rainbow and rgb2) or Settings.Boxes.GradientRGB2),ColorSequenceKeypoint.new(1,forcecolor or (Settings.Boxes.Rainbow and rgb3) or Settings.Boxes.Filled.RGB)}
            objs.Gradient2.Color = objs.Gradient1.Color
            if Settings.Boxes.Animate then
                objs.Gradient1.Rotation = RotationAngle * Settings.Boxes.RotationSpeed
                objs.Gradient2.Rotation = RotationAngle * Settings.Boxes.RotationSpeed
            else
                objs.Gradient1.Rotation = -90
                objs.Gradient2.Rotation = -90
            end
        end

        objs.Healthbar.Visible,objs.BehindHealthbar.Visible = Settings.Healthbar.Enabled,Settings.Healthbar.Enabled

        if objs.Healthbar.Visible then
            objs.Healthbar.Position = UDim2.new(0,Pos.X - w / 2 - 6,0,Pos.Y - h / 2 + h * (1 - ESP.Players[plr].health))
            objs.Healthbar.Size = UDim2.new(0,Settings.Healthbar.Width,0,h * ESP.Players[plr].health)
            objs.Healthbar.BackgroundColor3 = (Settings.Healthbar.Lerp and Lerp(Settings.Healthbar.DyingColor,Settings.Healthbar.HealthyColor,ESP.Players[plr].health)) or Settings.Healthbar.RGB
            objs.BehindHealthbar.Position = UDim2.new(0,Pos.X - w / 2 - 6,0,Pos.Y - h / 2)
            objs.BehindHealthbar.Size = UDim2.new(0,Settings.Healthbar.Width,0,h)
        end

        objs.HealthbarGradient.Enabled = Settings.Healthbar.Gradient
        objs.HealthbarGradient.Parent = objs.Healthbar
        objs.HealthbarGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,forcecolor or (Settings.Healthbar.Rainbow and rgb1) or Settings.Healthbar.GradientRGB1),ColorSequenceKeypoint.new(0.5,forcecolor or (Settings.Healthbar.Rainbow and rgb2) or Settings.Healthbar.GradientRGB2),ColorSequenceKeypoint.new(1,forcecolor or (Settings.Healthbar.Rainbow and rgb3) or Settings.Healthbar.GradientRGB3)}

        do
            objs.HealthText.Visible = Settings.Healthbar.HealthText
            objs.HealthTextGradient.Enabled = Settings.Healthbar.HealthText
            objs.HealthTextGradient.Parent = objs.HealthText
            objs.HealthTextGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,forcecolor or (Settings.Healthbar.RainbowText and rgb2) or Settings.Healthbar.HealthTextGradient1),ColorSequenceKeypoint.new(1,forcecolor or (Settings.Healthbar.RainbowText and rgb3) or Settings.Healthbar.HealthTextGradient2)}
            if Settings.Healthbar.Animate then
                objs.HealthTextGradient.Rotation = RotationAngle * Settings.Boxes.RotationSpeed
            else
                objs.HealthTextGradient.Rotation = -90
            end
            if objs.HealthText.Visible then
                objs.HealthText.Position = UDim2.new(0,Pos.X - w / 2 - 20,0,Pos.Y - h / 2 + h * (1 - ESP.Players[plr].health) + 3)
                objs.HealthText.Text = tostring(math.floor(ESP.Players[plr].health * 100))
                objs.HealthText.TextSize = Settings.TextSize
                if Settings.Healthbar.Lerp then
                    objs.HealthText.TextColor3 = Lerp(Settings.Healthbar.DyingColor,Settings.Healthbar.HealthyColor,ESP.Players[plr].health)
                else
                    objs.HealthText.TextColor3 = (isvisible and Settings.VisibleCheckRGB) or (isfriend and Settings.FriendcheckRGB) or Settings.Healthbar.HealthTextRGB
                end
            end
        end

        objs.Name.Visible = Settings.Names.Enabled
        objs.NameGradient.Enabled = Settings.Names.Enabled
        objs.NameGradient.Parent = objs.Name
        objs.NameGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,forcecolor or (Settings.Names.Rainbow and rgb2) or Settings.Names.Gradient1),ColorSequenceKeypoint.new(1,forcecolor or (Settings.Names.Rainbow and rgb3) or Settings.Names.Gradient2)}
        if Settings.Names.Animate then
            objs.NameGradient.Rotation = RotationAngle * Settings.Boxes.RotationSpeed
        else
            objs.NameGradient.Rotation = -90
        end
        if objs.Name.Visible then
            objs.Name.Text = '['..plr.Name:upper()..']'
            objs.Name.TextColor3 = (isfriend and Settings.FriendcheckRGB) or (isvisible and Settings.VisibleCheckRGB) or Settings.Names.RGB
            objs.Name.TextSize = Settings.TextSize
            objs.Name.Position = UDim2.new(0,Pos.X,0,Pos.Y - h / 2 - 9)
        end

        objs.Distance.Visible,objs.Weapon.Visible = Settings.Distances.Enabled,Settings.Weapons.Enabled
        objs.DistanceGradient.Enabled = Settings.Distances.Enabled
        objs.DistanceGradient.Parent = objs.Distance
        objs.DistanceGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,forcecolor or (Settings.Distances.Rainbow and rgb2) or Settings.Distances.Gradient1),ColorSequenceKeypoint.new(1,forcecolor or (Settings.Distances.Rainbow and rgb3) or Settings.Distances.Gradient2)}
        if Settings.Distances.Animate then
            objs.DistanceGradient.Rotation = RotationAngle * Settings.Boxes.RotationSpeed
        else
            objs.DistanceGradient.Rotation = -90
        end

        if objs.Distance.Visible then
            objs.Distance.Text = '['..tostring(math.floor(Dist))..'M]'
            objs.Distance.TextSize = Settings.TextSize
            objs.Distance.TextColor3 = (isfriend and Settings.FriendcheckRGB) or (isvisible and Settings.VisibleCheckRGB) or Settings.Distances.RGB
            objs.Distance.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8 + ((Settings.Weapons.Enabled and 12) or 0))
        end

        objs.WeaponGradient.Enabled = Settings.Weapons.Enabled
        objs.WeaponGradient.Parent = objs.Weapon
        objs.WeaponGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0,forcecolor or (Settings.Weapons.Rainbow and rgb2) or Settings.Weapons.Gradient1),ColorSequenceKeypoint.new(1,forcecolor or (Settings.Weapons.Rainbow and rgb3) or Settings.Weapons.Gradient2)}

        if Settings.Weapons.Animate then
            objs.WeaponGradient.Rotation = RotationAngle * Settings.Boxes.RotationSpeed
        else
            objs.WeaponGradient.Rotation = -90
        end

        if objs.Weapon.Visible then
            local Tool = ESP:GetWeapon(plr)
            objs.Weapon.Position = UDim2.new(0, Pos.X, 0, Pos.Y + h / 2 + 8)
            objs.Weapon.TextColor3 = (isfriend and Settings.FriendcheckRGB) or (isvisible and Settings.VisibleCheckRGB) or Settings.Weapons.WeaponTextRGB
            objs.Weapon.TextSize = Settings.TextSize
            objs.Weapon.Text = (Tool and '['..Tool:upper()..']') or (not HRP and objs.Weapon.Text) or ''
        end
    end)
end

---------------------------------//NETWORK//--------------------------------------------------------

if not NetworkClient then
    return lp:Kick('FAILED TO FETCH NETWORK CLIENT')
end

local OldNetwork = NetworkClient.send

function NetworkClient:Unload()
    NetworkClient.send = OldNetwork
end

-----------------------------//RAGE//----------------------------------

function Ragebot:GetOffsets(FirePosition, TargetPosition, Offset)
    if not Offset then return {FirePosition} end

    local Offsets = {}
    local CFrameOffset = CFrame.new(FirePosition, TargetPosition) * CFrame.Angles(0, 0, math.rad(math.random(1, 90)))

    for _,_position in next,ScanPositions do
        Offsets[#Offsets+1] = CFrameOffset * (_position * Offset)
    end

    return Offsets
end

function Ragebot:ScanPositions(origin, target, accel, speed, Penetration)
    local newOrigin = Ragebot:GetOffsets(origin,target,flags['fire scan'] and flags['fire scan offset'])
    local newTarget = Ragebot:GetOffsets(target,origin,flags['hit scan'] and flags['hit scan offset'])

    for _,_origin in next,newOrigin do
        for _,_target in next,newTarget do
            local velocity, hitTime = Utility:Trajectory(_origin, accel, _target, speed)
            if not BulletCheck(_origin, _target, velocity, accel, Penetration, 1/60) then continue end

            return _origin, _target, velocity, hitTime
        end
    end
end

function Ragebot:GetTargets()
    Ragebot.Targets = {}

    local CharacterObject = CharacterInterface.getCharacterObject()
    local HumanoidRootPart = CharacterObject and CharacterObject._rootPart

    ReplicationInterface.operateOnAllEntries(function(Player,Entry)
        if Player.Team == lp.Team or not Entry._alive or not Entry:isAlive() then return end

        local ThirdPersonObject = Entry._thirdPersonObject
        local Character = ThirdPersonObject and ThirdPersonObject._characterModel and ThirdPersonObject._characterModelHash
        if not Character or not ThirdPersonObject or not ThirdPersonObject._replicationObject or not ThirdPersonObject._replicationObject._receivedPosition then return end

        local PlayerPosition = ThirdPersonObject._replicationObject._receivedPosition
        local Origin = HumanoidRootPart.Position
        local Distance = (PlayerPosition - Origin).Magnitude

        Ragebot.Targets[#Ragebot.Targets+1] = {
            ["Player"] = Player,
            ["Character"] = Character,
            ["ThirdPersonObject"] = ThirdPersonObject,
            ["ReplicationObject"] = ReplicationObject,
            ["PlayerPosition"] = PlayerPosition,
            ["Distance"] = Distance,
            ["HumanoidRootPart"] = HumanoidRootPart
        }
    end)

    return Ragebot.Targets
end

function Ragebot:ScanPlayer(Weapon)
    local WeaponData = Weapon._weaponData
    local BulletSpeed = WeaponData.bulletspeed
    local Penetration = WeaponData.penetrationdepth
    if not Penetration or not BulletSpeed then return end

    local Targets = Ragebot:GetTargets()
    if not Targets then return end

    local HitTick = tick()
    local Firerate = 60 / (WeaponData.variablefirerate and WeaponData.firerate[Weapon._firemodeIndex] or WeaponData.firerate)
    if HitTick - Ragebot.LastHit < Firerate then return end

    local OriginPosition = Weapon and Weapon._barrelPart and Weapon._barrelPart.Position or camera.CFrame.Position

    for _,Player in next,Targets do
        local NewOrigin, NewTarget, Velocity, _ = Ragebot:ScanPositions(OriginPosition, Player.PlayerPosition, PublicSettings.bulletAcceleration, BulletSpeed, Penetration)
        if not NewOrigin then continue end

        if Weapon._magCount < 1 then
            if Weapon._spareCount >= WeaponData.magsize then
                Weapon._magCount = WeaponData.magsize
                Weapon._spareCount = Weapon._spareCount - Weapon._magCount
            else
                Weapon._magCount = Weapon._spareCount
                Weapon._spareCount = 0
            end
            NetworkClient:send("reload")
        end

        local Bullets = {}
        local BulletData = {
            camerapos = OriginPosition,
            firepos = NewOrigin,
            bullets = Bullets
        }

        for _ = 1, (WeaponData.pelletcount or 1) do
            local Ticket = debug.getupvalue(FirearmObject.fireRound, 11) + 1
            Bullets[#Bullets+1] = {Velocity.Unit, Ticket}
            debug.setupvalue(FirearmObject.fireRound, 11, Ticket)
        end

        NetworkClient:send("newbullets", Weapon.uniqueId, BulletData, NetworkClient.getTime() + SpawnCache.latency + SpawnCache.currentAddition)

        for _,Bullet in next,Bullets do
            NetworkClient:send("bullethit", Weapon.uniqueId, Player.Player, NewTarget, "Head", Bullet[2], NetworkClient.getTime() + SpawnCache.latency + SpawnCache.currentAddition)
        end

        Ragebot.LastHit = tick()
        Weapon._magCount = Weapon._magCount - 1
        return task.spawn(function()
            if flags['bt'] then
                Visuals:CreateBulletTracer(OriginPosition,Player.PlayerPosition,flags["bt color"].Color,flags["bt time"],flags["bt txt"])
            end
            if flags['hit sound'] then
                Utility:PlaySound(((flags['custom sound'] and CustomSoundID) or "rbxassetid://"..Visuals.HitSounds[flags.sound_type]),flags['vol'] * 100,100)
            end
        end)
    end
end

function Ragebot.ScanPlayers()
    if not flags["ragebot"] then return end

    local Weapon, WeaponController = Utility:GetLocalWeapon()
    if not SpawnCache.lastUpdate or not Weapon or not WeaponController or not Weapon._weaponData or not Weapon._spareCount or not Weapon._magCount or (Weapon._spareCount <= 0 and Weapon._magCount <= 0) or RoundSystemClientInterface.roundLock or not RoundSystemClientInterface.isRunning() or RoundSystemClientInterface.isCountingDown() then
        return
    end

    Ragebot:ScanPlayer(Weapon)
end

--------------------------------------//USER-INTERFACE//---------------------------------------------------------------

local window = Library:Window{Size = UDim2.new(0,750,0,800)}
local page = {a=window:Page({Name = 'Rage',Weapons = true}),b=window:Page({Name = 'Visual',Weapons = true}),d=window:Page({Name = 'Movement',Weapons = false}),e=window:Page({Name = 'Settings',Weapons = false})}
local Tab1,Tab2,Tab3,Tab4 = page.a,page.b,page.d,page.e
local combat = Tab1:Weapon({Icon = "rbxassetid://78350028758474"})
local aa = Tab1:Weapon({Icon = "rbxassetid://17344023559"})
local r = combat:Section{Name = 'Ragebot'}
local r2 = aa:Section{Name = 'Anti-Aim'}

r:Toggle{Name = "Enabled",flag = "ragebot"}:Keybind{Mode = 'Always',Name = 'Ragebot',flag = "ragebind"}
r:Toggle{Name = "Hit-Position Scanning",flag = "hit scan"}
r:Toggle{Name = "Fire-Position Scanning",flag = "fire scan"}
r:Slider{default = 0,Name = "Hit-Position Offset",min = 0,max = 10,Decimals = .5,flag = "hit scan offset"}
r:Slider{default = 0,Name = "Fire-Position Offset",min = 0,max = 10,Decimals = .5,flag = "fire scan offset"}
r:Dropdown{Name = "Body Part",Options = HitPoints,flag = "part",Default = 'Head'}

r2:Toggle{Name = "Enabled",flag = "aa"}
r2:Toggle{Name = "Underground",flag = "under"}
r2:Slider{default = 0,Name = "Spin Speed",min = 1,max = 50,Decimals = .5,flag = "spin speed"}
r2:Slider{default = 0,Name = "Yaw Sine Speed",min = 1,max = 50,Decimals = .5,flag = "yaw sine"}
r2:Slider{default = 0,Name = "Pitch Sine Speed",min = 1,max = 50,Decimals = .5,flag = "pitch sine"}
r2:Dropdown{Name = "Yaw",Options = {'Backward','Spin',"Random",'Sine'},Default = 'Backward',flag = "yaw"}
r2:Dropdown{Name = "Pitch",Options = {'Down','Up','Zero',"Random",'Sine'},Default = 'Down',flag = "pitch"}

local esp,World,sficon,vmicon = Tab2:Weapon{Icon = 'rbxassetid://6034281935'},Tab2:Weapon{Icon = 'rbxassetid://17343962832'},Tab2:Weapon{Icon = 'rbxassetid://7992557358'},Tab2:Weapon({Icon = "rbxassetid://17343713939"})--local World = Tab2:Weapon{Icon = 'rbxassetid://16997762295'}
local switch,espset,env,cams = esp:Section{Name = 'Switcher'},esp:Section{Name = 'Global Settings'},World:Section{Name = 'Environment'},sficon:Section{Name = 'Camera'}
local sf = sficon:Section{Name = 'Local-Visuals'}
local hss = sficon:Section{Name = 'Hit-Sound',Side = 'Right'}
local vm = vmicon:Section{Name = ('Viewmodel')}
local vs = esp:Section{Name = 'Enemies',Side = 'Right'}vs:SetVisible(false)
local tm = esp:Section{Name = 'Teammates',Side = 'Right'}tm:SetVisible(false)
local cl = esp:Section{Name = 'Client',Side = 'Right'}

local vmtoggle = vm:Toggle{Name = "Enabled",flag = "vm"}vmtoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,147,147),nig = 'vm color',Name = "Gun Color",flag="vm color"}vmtoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,147,147),nig = 'arm color',Name = "Arm Color",flag="arm color"}

cams:Toggle{Name = "Third Person",flag = "thirdp"}:Keybind{Mode = 'Toggle',Name = 'Third Person',flag = 'third bind'}
cams:Slider{default = 75,Name = "Field Of View",state = 75,min = 1,max = 120,Decimals = 1,flag = "cam fov",callback = function(v) camera.FieldOfView = v end}
cams:Slider{default = 0,Name = "X Offset",state = 8,min = 0,max = 30,Decimals = .5,flag = "tx"}
cams:Slider{default = 0,Name = "Y Offset",state = 8,min = 0,max = 30,Decimals = .5,flag = "ty"}
cams:Slider{default = 8,Name = "Z Offset",state = 8,min = 0,max = 30,Decimals = .5,flag = "tz"}

sf:Toggle{Name = "Bullet Tracers",flag = "bt"}:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,255,255),Name = "Tracer",state = Color3.new(1,1,1),flag="bt color"}
sf:Slider{default = 2,Name = "Life Time",state = 2,min = .1,max = 10,Decimals = .1,flag = "bt time"}
sf:Dropdown{Name = 'Texture',Options = Utility:GetIndexFromTable(Visuals.Textures),Default = 'Default',flag = 'bt txt'}

hss:Toggle{Name = "Enabled",flag = "hit sound"}
hss:Toggle{Name = "Use Local Files",flag = "custom sound"}
hss:Slider{default = 1,Name = "Volume",state = 2,min = .1,max = 10,Decimals = .1,flag = "vol"}
hss:Dropdown{Name = "Type",Options = Utility:GetIndexFromTable(Visuals.HitSounds),Default = 'rust',flag = "sound_type"}
local csid = hss:Dropdown{Name = "Files",Options = Utility.GetHitSounds(),flag = "custom id"}
hss:Button({Name = "Refresh Files",callback = function()csid:Refresh(Utility.GetHitSounds())end})

switch:Dropdown{Name = 'ESP Switcher',Options = {'Enemy','Client','Teammates'},Default = 'Client',flag = 'esp sec',callback = function(sec)vs:SetVisible(false)cl:SetVisible(false)tm:SetVisible(false)if sec == 'Enemy' then vs:SetVisible(true) elseif sec == 'Client' then cl:SetVisible(true) else tm:SetVisible(true) end end}
espset:Toggle{Name = 'Rainbow',flag = 'rainbow',callback = ESP.UpdateSettings}
espset:Slider{default = 5,Name = 'Rainbow Speed',min = 1,max = 100,Decimals = 1,flag = 'rainbow speed',callback = ESP.UpdateSettings}
espset:Slider{default = 2,Name = 'Healthbar Fade Speed',min = .1,max = 10,Decimals = .5,flag = 'hp speed',callback = ESP.UpdateSettings}
espset:Slider{default = 2,Name = 'Transparency Fade Speed',min = .1,max = 10,Decimals = .5,flag = 'trans speed',callback = ESP.UpdateSettings}

env:Colorpicker{alpha = 0,Default = ls.Ambient,Name = 'Ambient',state = ls.Ambient,flag='w Ambient',callback = function(v) ls.Ambient = v end}
env:Colorpicker{alpha = 0,Default = ls.FogColor,Name = 'Fog Color',state = ls.FogColor,flag='w FogColor',callback = function(v) ls.FogColor = v end}
env:Colorpicker{alpha = 0,Default = ls.OutdoorAmbient,Name = 'Outdoor Ambient',state = ls.OutdoorAmbient,flag='w OutdoorAmbient',callback = function(v) ls.OutdoorAmbient = v end}
env:Toggle{Name = 'Skybox',flag = 'world skybox',callback = function()if (not flags['world skybox']) or (not flags['world skyboxtype']) then return end Visuals.UpdateSkybox(flags['world skyboxtype'])end}
env:Dropdown{Name = 'Skybox',Options = {'Setting Sun','Fade Blue','Purple Nebula','Night Sky','Pink Daylight','Elegant Morning'},Default = 'Setting Sun',flag = 'world skyboxtype',callback = function()if (not flags['world skybox']) or (not flags['world skyboxtype']) then return end Visuals.UpdateSkybox(flags['world skyboxtype'])end}
env:Slider{default = ls.FogEnd,Name = 'Fog End',min = 0,max = 100000,Decimals = 10,flag = 'w FogEnd',callback = function(v) ls.FogEnd = v end}
env:Slider{default = ls.ClockTime,Name = 'Clock Time',state = ls.ClockTime,min = 0,max = 24,Decimals = .05,flag = 'w ClockTime',callback = function(v) ls.ClockTime = v end}
env:Slider{default = ls.Brightness,Name = 'Brightness',state = ls.Brightness,min = -50,max = 50,Decimals = .5,flag = 'w Brightness',callback = function(v) ls.Brightness = v end}
env:Slider{default = ls.ExposureCompensation,Name = 'Exposure Compensation',state = ls.ExposureCompensation,min = -10,max = 10,Decimals = .05,flag = 'w ExposureCompensation',callback = function(v) ls.ExposureCompensation = v end}

vs:Toggle{Name = 'Enabled',flag = 'esp enable',callback = ESP.UpdateSettings}
local boxtoggle = vs:Toggle{Name = 'Boxes',flag = 'esp box',callback = ESP.UpdateSettings}boxtoggle:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Box Color',flag='esp boxcolor',callback = ESP.UpdateSettings}boxtoggle:Colorpicker{alpha = .7,Default = Color3.new(1,1,1),Name = 'Box Color',flag='esp box fill color',callback = ESP.UpdateSettings}boxtoggle:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Box Color',flag='esp box grad1',callback = ESP.UpdateSettings}boxtoggle:Colorpicker{alpha = 0,Default = Color3.new(0,0,0),Name = 'Box Color',flag='esp box grad2',callback = ESP.UpdateSettings}
local chamtog = vs:Toggle{Name = 'Chams',flag = 'esp chams',callback = ESP.UpdateSettings}chamtog:Colorpicker{alpha = .5,Default = Color3.fromRGB(255,255,255),Name = 'Chams Fill Color',flag='chams fill color',callback = ESP.UpdateSettings}chamtog:Colorpicker{alpha = 1,Default = Color3.new(1,1,1),Name = 'Chams outline Color',flag='chams out color ',callback = ESP.UpdateSettings}
local nametog = vs:Toggle{Name = 'Names',flag = 'esp name',callback = ESP.UpdateSettings}nametog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Name Color',flag='esp namecolor',callback = ESP.UpdateSettings}nametog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Name Color',flag='esp namecolor2',callback = ESP.UpdateSettings}
vs:Toggle{Name = 'Visible',flag = 'vis enabled',callback = ESP.UpdateSettings}:Colorpicker{alpha = 0,Default = Color3.new(1,0.486274,0.486274),Name = 'Target Color',flag='esp viscolor',callback = ESP.UpdateSettings}
vs:Toggle{Name = 'Friends',flag = 'esp wl',callback = ESP.UpdateSettings}:Colorpicker{alpha = 0,Default = Color3.new(0.572549,1,0.607843),Name = 'Friend Color',flag='esp wlcolor',callback = ESP.UpdateSettings}
local weaptog = vs:Toggle{Name = 'Weapons',flag = 'esp weapon',callback = ESP.UpdateSettings}weaptog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Weapon Color',flag='esp weaponcolor',callback = ESP.UpdateSettings}weaptog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Weapon Color',flag='esp weaponcolor2',callback = ESP.UpdateSettings}
local disttog = vs:Toggle{Name = 'Distance',flag = 'esp dist',callback = ESP.UpdateSettings}disttog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Distance Color',flag='esp distcolor',callback = ESP.UpdateSettings}disttog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Distance Color',flag='esp distcolor2',callback = ESP.UpdateSettings}
local hptoggle = vs:Toggle{Name = 'Health Bar',flag = 'esp hp',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,255,255),Name = 'Health Bar Color',flag='bar color',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(159,255,159),Name = 'Healthy Color',flag='hp color1',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,2,2),Name = 'dying Color',flag='hp color2',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(),Name = 'gradient color',flag='hp grad color',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(116,116,116),Name = 'gradient color',flag='hp grad color2',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,255,255),Name = 'gradient color',flag='hp grad color3',callback = ESP.UpdateSettings}
local hptxttog = vs:Toggle{Name = 'Health Text',flag = 'esp hptxt',callback = ESP.UpdateSettings}hptxttog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Health Text Color',flag='esp hptxtcolor',callback = ESP.UpdateSettings}hptxttog:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Health Text Color',flag='esp hptxtcolor2',callback = ESP.UpdateSettings}
vs:Dropdown{Name = 'ESP Settings',Options = {'Filled Box','Health Lerp','Healthbar Gradient','Box Animation','Name Animation','Weapon Animation','Distance Animation','Health Text Animation','Rainbow Healthbar','Rainbow Box','Rainbow Health Text','Rainbow Name','Rainbow Weapon','Rainbow Distance'},max = 93,Default = {'Healthbar Gradient','Box Animation'},flag = 'esp sets',callback = ESP.UpdateSettings}
vs:Dropdown{Name = 'Chams Rendering',Options = {'AlwaysOnTop','Occluded'},Default = 'AlwaysOnTop',flag = 'chams mode',callback = ESP.UpdateSettings}
vs:Slider{default = 9,Name = 'Text Size',min = 1,max = 30,Decimals = 1,flag = 'esp txtsize',callback = ESP.UpdateSettings}
vs:Slider{default = 5000,Name = 'Max Distance',min = 5,max = 10000,Decimals = 5,flag = 'esp maxdist',callback = ESP.UpdateSettings}
vs:Slider{default = .2,Name = 'Box Line Size',min = .01,max = .51,Decimals = .01,flag = 'box size',callback = ESP.UpdateSettings}
vs:Slider{default = 1,Name = 'Health Bar Size',min = .1,max = 10,Decimals = .1,flag = 'esp hp size',callback = ESP.UpdateSettings}
vs:Slider{default = 3000,Name = 'Visible Check Distance',min = 5,max = 10000,Decimals = 5,flag = 'esp vdist',callback = ESP.UpdateSettings}

tm:Toggle{Name = 'Enabled',flag = 'team enable',callback = ESP.UpdateSettings}
local boxtoggle3 = tm:Toggle{Name = 'Boxes',flag = 'team box',callback = ESP.UpdateSettings}boxtoggle3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Box Color',flag='team boxcolor',callback = ESP.UpdateSettings}boxtoggle3:Colorpicker{alpha = .7,Default = Color3.new(1,1,1),Name = 'Box Color',flag='team box fill color',callback = ESP.UpdateSettings}boxtoggle3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Box Color',flag='team box grad1',callback = ESP.UpdateSettings}boxtoggle3:Colorpicker{alpha = 0,Default = Color3.new(0,0,0),Name = 'Box Color',flag='team box grad2',callback = ESP.UpdateSettings}
local chamtog3 = tm:Toggle{Name = 'Chams',flag = 'team chams',callback = ESP.UpdateSettings}chamtog3:Colorpicker{alpha = .5,Default = Color3.fromRGB(255,255,255),Name = 'Chams Fill Color',flag='team chams fill color',callback = ESP.UpdateSettings}chamtog3:Colorpicker{alpha = 1,Default = Color3.new(1,1,1),Name = 'Chams outline Color',flag='team chams out color ',callback = ESP.UpdateSettings}
local nametog2 = tm:Toggle{Name = 'Names',flag = 'team name',callback = ESP.UpdateSettings}nametog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Name Color',flag='team namecolor',callback = ESP.UpdateSettings}nametog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Name Color',flag='team namecolor2',callback = ESP.UpdateSettings}
tm:Toggle{Name = 'Visible',flag = 'team vis enabled',callback = ESP.UpdateSettings}:Colorpicker{alpha = 0,Default = Color3.new(1,0.486274,0.486274),Name = 'Target Color',flag='team viscolor',callback = ESP.UpdateSettings}
tm:Toggle{Name = 'Friends',flag = 'team wl',callback = ESP.UpdateSettings}:Colorpicker{alpha = 0,Default = Color3.new(0.572549,1,0.607843),Name = 'Friend Color',flag='team wlcolor',callback = ESP.UpdateSettings}
local weaptog2 = tm:Toggle{Name = 'Weapons',flag = 'team weapon',callback = ESP.UpdateSettings}weaptog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Weapon Color',flag='team weaponcolor',callback = ESP.UpdateSettings}weaptog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Weapon Color',flag='team weaponcolor2',callback = ESP.UpdateSettings}
local disttog2 = tm:Toggle{Name = 'Distance',flag = 'team dist',callback = ESP.UpdateSettings}disttog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Distance Color',flag='team distcolor',callback = ESP.UpdateSettings}disttog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Distance Color',flag='team distcolor2',callback = ESP.UpdateSettings}
local hptoggle3 = tm:Toggle{Name = 'Health Bar',flag = 'team hp',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,255,255),Name = 'Health Bar Color',flag='team bar color',callback = ESP.UpdateSettings}hptoggle3:Colorpicker{alpha = 0,Default = Color3.fromRGB(159,255,159),Name = 'Healthy Color',flag='team hp color1',callback = ESP.UpdateSettings}hptoggle3:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,2,2),Name = 'dying Color',flag='team hp color2',callback = ESP.UpdateSettings}hptoggle3:Colorpicker{alpha = 0,Default = Color3.fromRGB(),Name = 'gradient color',flag='team hp grad color',callback = ESP.UpdateSettings}hptoggle3:Colorpicker{alpha = 0,Default = Color3.fromRGB(116,116,116),Name = 'gradient color',flag='team hp grad color2',callback = ESP.UpdateSettings}hptoggle3:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,255,255),Name = 'gradient color',flag='team hp grad color3',callback = ESP.UpdateSettings}
local hptxttog2 = tm:Toggle{Name = 'Health Text',flag = 'team hptxt',callback = ESP.UpdateSettings}hptxttog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Health Text Color',flag='team hptxtcolor',callback = ESP.UpdateSettings}hptxttog2:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Health Text Color',flag='team hptxtcolor2',callback = ESP.UpdateSettings}
tm:Dropdown{Name = 'ESP Settings',Options = {'Filled Box','Health Lerp','Healthbar Gradient','Box Animation','Name Animation','Weapon Animation','Distance Animation','Health Text Animation','Rainbow Healthbar','Rainbow Box','Rainbow Health Text','Rainbow Name','Rainbow Weapon','Rainbow Distance'},max = 93,Default = {'Healthbar Gradient','Box Animation'},flag = 'team sets',callback = ESP.UpdateSettings}
tm:Dropdown{Name = 'Chams Rendering',Options = {'AlwaysOnTop','Occluded'},Default = 'AlwaysOnTop',flag = 'team chams mode',callback = ESP.UpdateSettings}
tm:Slider{default = 9,Name = 'Text Size',min = 1,max = 30,Decimals = 1,flag = 'team txtsize',callback = ESP.UpdateSettings}
tm:Slider{default = 5000,Name = 'Max Distance',min = 5,max = 10000,Decimals = 5,flag = 'team maxdist',callback = ESP.UpdateSettings}
tm:Slider{default = .2,Name = 'Box Line Size',min = .01,max = .51,Decimals = .01,flag = 'team box size',callback = ESP.UpdateSettings}
tm:Slider{default = 1,Name = 'Health Bar Size',min = .1,max = 10,Decimals = .1,flag = 'team hp size',callback = ESP.UpdateSettings}
tm:Slider{default = 3000,Name = 'Visible Check Distance',min = 5,max = 10000,Decimals = 5,flag = 'team vdist',callback = ESP.UpdateSettings}

cl:Toggle{Name = 'Enabled',flag = 'lp enable',callback = ESP.UpdateSettings}
local boxtoggle4 = cl:Toggle{Name = 'Boxes',flag = 'lp box',callback = ESP.UpdateSettings}boxtoggle4:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Box Color',flag='lp boxcolor',callback = ESP.UpdateSettings}boxtoggle4:Colorpicker{alpha = .7,Default = Color3.new(1,1,1),Name = 'Box Color',flag='lp box fill color',callback = ESP.UpdateSettings}boxtoggle4:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Box Color',flag='lp box grad1',callback = ESP.UpdateSettings}boxtoggle4:Colorpicker{alpha = 0,Default = Color3.new(0,0,0),Name = 'Box Color',flag='lp box grad2',callback = ESP.UpdateSettings}
local chamtog4 = cl:Toggle{Name = 'Chams',flag = 'lp chams',callback = ESP.UpdateSettings}chamtog4:Colorpicker{alpha = .5,Default = Color3.fromRGB(255,255,255),Name = 'Chams Fill Color',flag='lp chams fill color',callback = ESP.UpdateSettings}chamtog4:Colorpicker{alpha = 1,Default = Color3.new(1,1,1),Name = 'Chams outline Color',flag='lp chams out color ',callback = ESP.UpdateSettings}
local nametog3 = cl:Toggle{Name = 'Names',flag = 'lp name',callback = ESP.UpdateSettings}nametog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Name Color',flag='lp namecolor',callback = ESP.UpdateSettings}nametog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Name Color',flag='lp namecolor2',callback = ESP.UpdateSettings}
cl:Toggle{Name = 'Visible',flag = 'lp vis enabled',callback = ESP.UpdateSettings}:Colorpicker{alpha = 0,Default = Color3.new(1,0.486274,0.486274),Name = 'Target Color',flag='lp viscolor',callback = ESP.UpdateSettings}
cl:Toggle{Name = 'Friends',flag = 'lp wl',callback = ESP.UpdateSettings}:Colorpicker{alpha = 0,Default = Color3.new(0.572549,1,0.607843),Name = 'Friend Color',flag='lp wlcolor',callback = ESP.UpdateSettings}
local weaptog3 = cl:Toggle{Name = 'Weapons',flag = 'lp weapon',callback = ESP.UpdateSettings}weaptog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Weapon Color',flag='lp weaponcolor',callback = ESP.UpdateSettings}weaptog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Weapon Color',flag='lp weaponcolor2',callback = ESP.UpdateSettings}
local disttog3 = cl:Toggle{Name = 'Distance',flag = 'lp dist',callback = ESP.UpdateSettings}disttog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Distance Color',flag='lp distcolor',callback = ESP.UpdateSettings}disttog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Distance Color',flag='lp distcolor2',callback = ESP.UpdateSettings}
local hptoggle4 = cl:Toggle{Name = 'Health Bar',flag = 'lp hp',callback = ESP.UpdateSettings}hptoggle:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,255,255),Name = 'Health Bar Color',flag='lp bar color',callback = ESP.UpdateSettings}hptoggle4:Colorpicker{alpha = 0,Default = Color3.fromRGB(159,255,159),Name = 'Healthy Color',flag='lp hp color1',callback = ESP.UpdateSettings}hptoggle4:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,2,2),Name = 'dying Color',flag='lp hp color2',callback = ESP.UpdateSettings}hptoggle4:Colorpicker{alpha = 0,Default = Color3.fromRGB(),Name = 'gradient color',flag='lp hp grad color',callback = ESP.UpdateSettings}hptoggle4:Colorpicker{alpha = 0,Default = Color3.fromRGB(116,116,116),Name = 'gradient color',flag='lp hp grad color2',callback = ESP.UpdateSettings}hptoggle4:Colorpicker{alpha = 0,Default = Color3.fromRGB(255,255,255),Name = 'gradient color',flag='lp hp grad color3',callback = ESP.UpdateSettings}
local hptxttog3 = cl:Toggle{Name = 'Health Text',flag = 'lp hptxt',callback = ESP.UpdateSettings}hptxttog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Health Text Color',flag='lp hptxtcolor',callback = ESP.UpdateSettings}hptxttog3:Colorpicker{alpha = 0,Default = Color3.new(1,1,1),Name = 'Health Text Color',flag='lp hptxtcolor2',callback = ESP.UpdateSettings}
cl:Dropdown{Name = 'ESP Settings',Options = {'Filled Box','Health Lerp','Healthbar Gradient','Box Animation','Name Animation','Weapon Animation','Distance Animation','Health Text Animation','Rainbow Healthbar','Rainbow Box','Rainbow Health Text','Rainbow Name','Rainbow Weapon','Rainbow Distance'},max = 93,Default = {'Healthbar Gradient','Box Animation'},flag = 'lp sets',callback = ESP.UpdateSettings}
cl:Dropdown{Name = 'Chams Rendering',Options = {'AlwaysOnTop','Occluded'},Default = 'AlwaysOnTop',flag = 'lp chams mode',callback = ESP.UpdateSettings}
cl:Slider{default = 9,Name = 'Text Size',min = 1,max = 30,Decimals = 1,flag = 'lp txtsize',callback = ESP.UpdateSettings}
cl:Slider{default = 5000,Name = 'Max Distance',min = 5,max = 10000,Decimals = 5,flag = 'lp maxdist',callback = ESP.UpdateSettings}
cl:Slider{default = .2,Name = 'Box Line Size',min = .01,max = .51,Decimals = .01,flag = 'lp box size',callback = ESP.UpdateSettings}
cl:Slider{default = 1,Name = 'Health Bar Size',min = .1,max = 10,Decimals = .1,flag = 'lp hp size',callback = ESP.UpdateSettings}
cl:Slider{default = 3000,Name = 'Visible Check Distance',min = 5,max = 10000,Decimals = 5,flag = 'lp vdist',callback = ESP.UpdateSettings}

local mv = Tab3:Section{Name = 'Movement'}

mv:Toggle{Name = 'Bunny-Hop',flag = 'bhop'}
mv:Toggle{Name = 'Movement Speed',flag = 'move'}:Keybind{Mode = 'Toggle',Name = 'Speed',flag = 'speed bind'}
mv:Toggle{Name = 'Disable Fall Damage',flag = 'no fall'}
mv:Slider{default = 50,Name = 'Speed',min = 1,max = 1000,Decimals = 2,flag = 'movespeed'}
mv:Slider{default = 4,Name = 'Bunny-Hop Jump Power',min = 0,max = 20,Decimals = .5,flag = 'jump power'}

local Menu,Config = Tab4:Section{Name = 'Menu',Size = 120},Tab4:Section{Name = 'Configs',Size = 200,Side = 'Right'}
Menu:Colorpicker{alpha = 0,Default = Color3.new(0.811764,0.596078,0.494117),Name = 'Menu Accent',flag='accent',callback = function(c)Library:ChangeAccent(Color3.new(0.811764,0.596078,0.494117))Library:ChangeAccent(c)end}task.wait()
Menu:Keybind{Name = 'Menu key',Flag = 'MenuKey',Default = Enum.KeyCode.End,Mode = 'Toggle',Ignore = true,Callback = function() LibraryOpen = not LibraryOpen Library:SetOpen(LibraryOpen) end}task.wait()
Menu:Dropdown{Name = 'Notification Position',Flag = 'Notification Position',Options = {'Top Left','Middle'},Default = 'Top Left'}task.wait()
Menu:Label{Centered = true,Name = 'Credits'}task.wait()
Menu:Label{Centered = true,Name = '0f14 : Main'}task.wait()
Menu:Label{Centered = true,Name = 'Portal : User Interface'}task.wait()

ConfigList=Config:Dropdown{Name = 'Config List',Flag = 'SettingConfigurationList',Options = {}}task.wait()
Config:Toggle{default = true,Name = 'Keybind List',Flag = 'Keybind List',Callback = function(Bool)if getgenv().PlaceHolderUI then getgenv().PlaceHolderUI.Enabled=Bool end end}task.wait()
Config:Textbox{Name = 'Config Name',Flag = 'SettingsConfigurationName',Placeholder = 'Config Name'}task.wait()
Config:Button{Name = 'Create',Callback = function()writefile('Northern/Phantom Forces/configs/' .. flags.SettingsConfigurationName .. '.cfg',Library:GetConfig())Utility.UpdateConfigList()end}task.wait()
Config:Button{Name = 'Save',Callback = function()if flags.SettingConfigurationList then writefile('Northern/Phantom Forces/configs/' .. flags.SettingConfigurationList .. '.cfg',Library:GetConfig())end ESP.UpdateSettings()end}task.wait()
Config:Button{Name = 'Load',Callback = function()if flags.SettingConfigurationList then Library:LoadConfig(readfile('Northern/Phantom Forces/configs/' .. flags.SettingConfigurationList .. '.cfg'))end ESP.UpdateSettings()end}task.wait()
Config:Button{Name = 'Delete',Callback = function()if flags.SettingConfigurationList then delfile('Northern/Phantom Forces/configs/' .. flags.SettingConfigurationList .. '.cfg')end Utility.UpdateConfigList()ESP.UpdateSettings()end}task.wait()
Config:Button{Name = 'Refresh',Callback = Utility.UpdateConfigList}task.wait()
Utility.UpdateConfigList()

-----------------------------------//CONNECTIONS//-------------------------------------------------

for _,Player in next,plrs:GetPlayers() do
    ESP.AddPlayer(Player)
end

plrs.PlayerAdded:Connect(ESP.AddPlayer)

plrs.PlayerRemoving:Connect(ESP.RemovePlayer)

-----------------------------------//LOOPS//----------------------------------------------

Utility.CreateLoop(.5,Visuals.Update)

Utility.CreateLoop(.5,ESP.UpdateSettings)

rs.Heartbeat:Connect(ESP.Render)

rs:BindToRenderStep('bro is a flash',200,Movement.Update)

rs:BindToRenderStep('TIP : dont be rage <3',300,Ragebot.ScanPlayers)

-------------------------------------//HOOKS//-------------------------------------------------

ls.Changed:Connect(function(property)
    if not table.find(LightingProperties,(property)) then return end
    if typeof(flags['w '..property]) == 'table' then return pcall(function()ls[property] = flags['w '..property].Color end)end
    ls[property] = flags['w '..property]
end)

camera:GetPropertyChangedSignal("FieldOfView"):Connect(function(NewFieldOfView)
	if NewFieldOfView == flags['cam fov'] then return end
	camera.FieldOfView = flags['cam fov']
end)

function NetworkClient:send(command, ...)
    if command == "falldamage" and flags['no fall'] then
        return
    elseif command == 'spawn' then
        SpawnCache = {
            currentAddition = SpawnCache.currentAddition or 0,
            latency = SpawnCache.latency or 0,
            updateDebt = 0,
            spawnTime = os.clock(),
            spawned = true
        }
    elseif command == "repupdate" then
        local position, angles, time = ...
        if CharacterInterface:isAlive() then
            if flags["aa"] then
                local yaw = angles.y
                local pitch = angles.x

                if flags['under'] then
                    position -= Vector3.new(0,1.2,0)
                end

                if flags['pitch'] == "Up" then
                    pitch = 1.5
                elseif flags['pitch'] == "Down" then
                    pitch = -1.5
                elseif flags['pitch'] == "Zero" then
                    pitch = 0
                elseif flags['pitch'] == "Sine" then
                    pitch = math.sin(tick() * flags['pitch sine']) * 2
                else
                    pitch = math.random(-15,15)/10
                end

                if flags['yaw'] == "Backwards" then
                    yaw += math.pi
                elseif flags['yaw'] == "Spin" then
                    yaw = (tick() * flags['spin speed']) % 12
                elseif flags['yaw'] == "Sine" then
                    yaw = math.sin(tick() * flags['yaw sine']) * 4
                else
                    yaw = math.random(-31,31)/10
                end

                angles = Vector3.new(pitch, yaw, angles.Z)
            end

            if flags['thirdp'] and flags['third bind'] then
                local FakeObject = Visuals.FakePlayer
                if not FakeObject then
                    local NewRepObject = ReplicationObject.new(setmetatable({}, {
                        __index = function(_, index)
                            return lp[index]
                        end,
                        __newindex = function(_, index, value)
                            lp[index] = value
                            return
                        end
                    }))
                    Visuals.FakePlayer = ThirdPersonObject.new(lp,WeaponControllerInterface:getActiveWeaponController(),NewRepObject)
                    Visuals.FakePlayer._player = lp
                    Visuals.FakePlayer._replicationObject = NewRepObject
                    FakeObject = Visuals.FakePlayer._replicationObject
                end

                local currentTick = tick()

                if FakeObject._replicationObject then
                    if not Visuals.Spawned then
                        local classData = PlayerDataClientInterface.getPlayerData().settings.classdata
                        FakeObject._replicationObject:spawn(nil, classData[classData.curclass])
                        Visuals.Spawned = true
                    end

                    FakeObject._replicationObject._smoothReplication:receive(GameClock.getTime(), currentTick, {
                        t = currentTick,
                        position = position,
                        velocity = Zero,
                        angles = angles,
                        breakcount = 0
                    }, false)

                    FakeObject._replicationObject._updaterecieved = true
                    FakeObject._replicationObject._receivedPosition = position
                    FakeObject._replicationObject._receivedFrameTime = GameClock.getTime()
                    FakeObject._replicationObject._lastPacketTime = GameClock.getTime()
                    FakeObject._replicationObject:step(3, true)
                end
            end
        end

        if SpawnCache.updateDebt > 0 then
            SpawnCache.updateDebt -= 1
            return
        end

        if flags['move'] and SpawnCache.lastUpdate then
            OldNetwork(Network, command, SpawnCache.lastUpdate, angles, time + SpawnCache.latency + SpawnCache.currentAddition)
            SpawnCache.updateDebt += 1
        end

        SpawnCache.lastAngles = angles
        SpawnCache.lastUpdateTime = time
        SpawnCache.lastUpdate = position

        return OldNetwork(Network, command, position, angles, time + SpawnCache.latency + SpawnCache.currentAddition)
    end
    return OldNetwork(Network, command, ...)
end

oldIndex = hookmetamethod(game, "__newindex", function(Self, Index, Value)
    if checkcaller() or Self ~= camera or Index ~= "CFrame" or not flags['thirdp'] or not flags['third bind'] or not CharacterInterface:isAlive() then
        return oldIndex(Self, Index, Value)
    end
    return oldIndex(Self, Index, Value * CFrame.new(flags['tx'],flags['ty'],flags['tz']))
end)
